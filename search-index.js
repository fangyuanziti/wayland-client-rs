var searchIndex = {};
searchIndex["wayland_server"] = {"doc":"Server-side Wayland connector","items":[[3,"Client","wayland_server","A wayland client connected to your server",null,null],[3,"Display","","A wayland socket",null,null],[3,"EventLoop","","",null,null],[3,"EventLoopHandle","","Handle to an event loop",null,null],[3,"StateGuard","","Guard to access internal state of an event loop",null,null],[3,"Global","","A handle to a global object",null,null],[4,"EventResult","","Possible outcome of the call of a event on a resource",null,null],[13,"Sent","","Message has been buffered and will be sent to client",0,null],[13,"Destroyed","","This resource is already destroyed, request has been ignored",0,null],[5,"create_display","","Create a new display",null,null],[0,"protocol","","The wayland core protocol",null,null],[0,"wl_callback","wayland_server::protocol","callback object",null,null],[3,"WlCallback","wayland_server::protocol::wl_callback","",null,null],[11,"ptr","","",1,null],[11,"from_ptr_new","","",1,null],[11,"from_ptr_initialized","","",1,null],[11,"interface_ptr","","",1,null],[11,"interface_name","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",1,null],[11,"is_alive","","",1,null],[11,"equals","","",1,null],[11,"done","","done event",1,null],[0,"wl_compositor","wayland_server::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_server::protocol::wl_compositor","",null,null],[8,"Handler","","",null,null],[11,"create_surface","","create new surface",2,null],[11,"create_region","","create new region",2,null],[11,"ptr","","",3,null],[11,"from_ptr_new","","",3,null],[11,"from_ptr_initialized","","",3,null],[11,"interface_ptr","","",3,null],[11,"interface_name","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",3,null],[11,"is_alive","","",3,null],[11,"equals","","",3,null],[0,"wl_shm_pool","wayland_server::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_server::protocol::wl_shm_pool","",null,null],[8,"Handler","","",null,null],[11,"create_buffer","","create a buffer from the pool",4,null],[11,"destroy","","destroy the pool",4,null],[11,"resize","","change the size of the pool mapping",4,null],[11,"ptr","","",5,null],[11,"from_ptr_new","","",5,null],[11,"from_ptr_initialized","","",5,null],[11,"interface_ptr","","",5,null],[11,"interface_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",5,null],[11,"is_alive","","",5,null],[11,"equals","","",5,null],[0,"wl_shm","wayland_server::protocol","shared memory support",null,null],[3,"WlShm","wayland_server::protocol::wl_shm","",null,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","",6,null],[13,"InvalidStride","","",6,null],[13,"InvalidFd","","",6,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","",7,null],[13,"Xrgb8888","","",7,null],[13,"C8","","",7,null],[13,"Rgb332","","",7,null],[13,"Bgr233","","",7,null],[13,"Xrgb4444","","",7,null],[13,"Xbgr4444","","",7,null],[13,"Rgbx4444","","",7,null],[13,"Bgrx4444","","",7,null],[13,"Argb4444","","",7,null],[13,"Abgr4444","","",7,null],[13,"Rgba4444","","",7,null],[13,"Bgra4444","","",7,null],[13,"Xrgb1555","","",7,null],[13,"Xbgr1555","","",7,null],[13,"Rgbx5551","","",7,null],[13,"Bgrx5551","","",7,null],[13,"Argb1555","","",7,null],[13,"Abgr1555","","",7,null],[13,"Rgba5551","","",7,null],[13,"Bgra5551","","",7,null],[13,"Rgb565","","",7,null],[13,"Bgr565","","",7,null],[13,"Rgb888","","",7,null],[13,"Bgr888","","",7,null],[13,"Xbgr8888","","",7,null],[13,"Rgbx8888","","",7,null],[13,"Bgrx8888","","",7,null],[13,"Abgr8888","","",7,null],[13,"Rgba8888","","",7,null],[13,"Bgra8888","","",7,null],[13,"Xrgb2101010","","",7,null],[13,"Xbgr2101010","","",7,null],[13,"Rgbx1010102","","",7,null],[13,"Bgrx1010102","","",7,null],[13,"Argb2101010","","",7,null],[13,"Abgr2101010","","",7,null],[13,"Rgba1010102","","",7,null],[13,"Bgra1010102","","",7,null],[13,"Yuyv","","",7,null],[13,"Yvyu","","",7,null],[13,"Uyvy","","",7,null],[13,"Vyuy","","",7,null],[13,"Ayuv","","",7,null],[13,"Nv12","","",7,null],[13,"Nv21","","",7,null],[13,"Nv16","","",7,null],[13,"Nv61","","",7,null],[13,"Yuv410","","",7,null],[13,"Yvu410","","",7,null],[13,"Yuv411","","",7,null],[13,"Yvu411","","",7,null],[13,"Yuv420","","",7,null],[13,"Yvu420","","",7,null],[13,"Yuv422","","",7,null],[13,"Yvu422","","",7,null],[13,"Yuv444","","",7,null],[13,"Yvu444","","",7,null],[8,"Handler","","",null,null],[11,"create_pool","","create a shm pool",8,null],[11,"ptr","","",9,null],[11,"from_ptr_new","","",9,null],[11,"from_ptr_initialized","","",9,null],[11,"interface_ptr","","",9,null],[11,"interface_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",9,null],[11,"is_alive","","",9,null],[11,"equals","","",9,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"from_raw","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"from_raw","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",7,null],[11,"format","","pixel format description",9,null],[0,"wl_buffer","wayland_server::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_server::protocol::wl_buffer","",null,null],[8,"Handler","","",null,null],[11,"destroy","","destroy a buffer",10,null],[11,"ptr","","",11,null],[11,"from_ptr_new","","",11,null],[11,"from_ptr_initialized","","",11,null],[11,"interface_ptr","","",11,null],[11,"interface_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",11,null],[11,"is_alive","","",11,null],[11,"equals","","",11,null],[11,"release","","compositor releases buffer",11,null],[0,"wl_data_offer","wayland_server::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_server::protocol::wl_data_offer","",null,null],[4,"Error","","",null,null],[13,"InvalidFinish","","",12,null],[13,"InvalidActionMask","","",12,null],[13,"InvalidAction","","",12,null],[13,"InvalidOffer","","",12,null],[8,"Handler","","",null,null],[11,"accept","","accept one of the offered mime types",13,null],[11,"receive","","request that the data is transferred",13,null],[11,"destroy","","destroy data offer",13,null],[11,"finish","","the offer will no longer be used",13,null],[11,"set_actions","","set the available/preferred drag-and-drop actions",13,null],[11,"ptr","","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",14,null],[11,"is_alive","","",14,null],[11,"equals","","",14,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"from_raw","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",12,null],[11,"offer","","advertise offered mime type",14,null],[11,"source_actions","","notify the source-side available actions",14,null],[11,"action","","notify the selected action",14,null],[0,"wl_data_source","wayland_server::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_server::protocol::wl_data_source","",null,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","",15,null],[13,"InvalidSource","","",15,null],[8,"Handler","","",null,null],[11,"offer","","add an offered mime type",16,null],[11,"destroy","","destroy the data source",16,null],[11,"set_actions","","set the available drag-and-drop actions",16,null],[11,"ptr","","",17,null],[11,"from_ptr_new","","",17,null],[11,"from_ptr_initialized","","",17,null],[11,"interface_ptr","","",17,null],[11,"interface_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",17,null],[11,"is_alive","","",17,null],[11,"equals","","",17,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"from_raw","","",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",15,null],[11,"target","","a target accepts an offered mime type",17,null],[11,"send","","send the data",17,null],[11,"cancelled","","selection was cancelled",17,null],[11,"dnd_drop_performed","","the drag-and-drop operation physically finished",17,null],[11,"dnd_finished","","the drag-and-drop operation concluded",17,null],[11,"action","","notify the selected action",17,null],[0,"wl_data_device","wayland_server::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_server::protocol::wl_data_device","",null,null],[4,"Error","","",null,null],[13,"Role","","",18,null],[8,"Handler","","",null,null],[11,"start_drag","","start drag-and-drop operation",19,null],[11,"set_selection","","copy data to the selection",19,null],[11,"release","","destroy data device",19,null],[11,"ptr","","",20,null],[11,"from_ptr_new","","",20,null],[11,"from_ptr_initialized","","",20,null],[11,"interface_ptr","","",20,null],[11,"interface_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",20,null],[11,"is_alive","","",20,null],[11,"equals","","",20,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"from_raw","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",18,null],[11,"data_offer","","introduce a new wl_data_offer",20,null],[11,"enter","","initiate drag-and-drop session",20,null],[11,"leave","","end drag-and-drop session",20,null],[11,"motion","","drag-and-drop session motion",20,null],[11,"drop","","end drag-and-drop session successfully",20,null],[11,"selection","","advertise new selection",20,null],[0,"wl_data_device_manager","wayland_server::protocol","data transfer interface",null,null],[3,"WlDataDeviceManager","wayland_server::protocol::wl_data_device_manager","",null,null],[3,"DndAction","","drag and drop actions",null,null],[17,"None","","",null,null],[17,"Copy","","",null,null],[17,"Move","","",null,null],[17,"Ask","","",null,null],[8,"Handler","","",null,null],[11,"create_data_source","","create a new data source",21,null],[11,"get_data_device","","create a new data device",21,null],[11,"ptr","","",22,null],[11,"from_ptr_new","","",22,null],[11,"from_ptr_initialized","","",22,null],[11,"interface_ptr","","",22,null],[11,"interface_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",22,null],[11,"is_alive","","",22,null],[11,"equals","","",22,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"partial_cmp","","",23,null],[11,"lt","","",23,null],[11,"le","","",23,null],[11,"gt","","",23,null],[11,"ge","","",23,null],[11,"cmp","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",23,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,null],[11,"is_all","","Returns `true` if all flags are currently set.",23,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,null],[11,"insert","","Inserts the specified flags in-place.",23,null],[11,"remove","","Removes the specified flags in-place.",23,null],[11,"toggle","","Toggles the specified flags in-place.",23,null],[11,"bitor","","Returns the union of the two sets of flags.",23,null],[11,"bitor_assign","","Adds the set of flags.",23,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,null],[11,"bitxor_assign","","Toggles the set of flags.",23,null],[11,"bitand","","Returns the intersection between the two sets of flags.",23,null],[11,"bitand_assign","","Disables all flags disabled in the set.",23,null],[11,"sub","","Returns the set difference of the two sets of flags.",23,null],[11,"sub_assign","","Disables all flags enabled in the set.",23,null],[11,"not","","Returns the complement of this set of flags.",23,null],[11,"extend","","",23,null],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",23,null],[0,"wl_shell","wayland_server::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_server::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","",24,null],[8,"Handler","","",null,null],[11,"get_shell_surface","","create a shell surface from a surface",25,null],[11,"ptr","","",26,null],[11,"from_ptr_new","","",26,null],[11,"from_ptr_initialized","","",26,null],[11,"interface_ptr","","",26,null],[11,"interface_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",26,null],[11,"is_alive","","",26,null],[11,"equals","","",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"from_raw","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",24,null],[0,"wl_shell_surface","wayland_server::protocol","desktop-style metadata interface",null,null],[3,"WlShellSurface","wayland_server::protocol::wl_shell_surface","",null,null],[3,"Resize","","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","",27,null],[13,"Scale","","",27,null],[13,"Driver","","",27,null],[13,"Fill","","",27,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[17,"Inactive","","",null,null],[8,"Handler","","",null,null],[11,"pong","","respond to a ping event",28,null],[11,"move_","","start an interactive move",28,null],[11,"resize","","start an interactive resize",28,null],[11,"set_toplevel","","make the surface a toplevel surface",28,null],[11,"set_transient","","make the surface a transient surface",28,null],[11,"set_fullscreen","","make the surface a fullscreen surface",28,null],[11,"set_popup","","make the surface a popup surface",28,null],[11,"set_maximized","","make the surface a maximized surface",28,null],[11,"set_title","","set surface title",28,null],[11,"set_class","","set surface class",28,null],[11,"ptr","","",29,null],[11,"from_ptr_new","","",29,null],[11,"from_ptr_initialized","","",29,null],[11,"interface_ptr","","",29,null],[11,"interface_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",29,null],[11,"is_alive","","",29,null],[11,"equals","","",29,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"clone","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"cmp","","",30,null],[11,"hash","","",30,null],[11,"fmt","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,null],[11,"is_all","","Returns `true` if all flags are currently set.",30,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,null],[11,"insert","","Inserts the specified flags in-place.",30,null],[11,"remove","","Removes the specified flags in-place.",30,null],[11,"toggle","","Toggles the specified flags in-place.",30,null],[11,"bitor","","Returns the union of the two sets of flags.",30,null],[11,"bitor_assign","","Adds the set of flags.",30,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,null],[11,"bitxor_assign","","Toggles the set of flags.",30,null],[11,"bitand","","Returns the intersection between the two sets of flags.",30,null],[11,"bitand_assign","","Disables all flags disabled in the set.",30,null],[11,"sub","","Returns the set difference of the two sets of flags.",30,null],[11,"sub_assign","","Disables all flags enabled in the set.",30,null],[11,"not","","Returns the complement of this set of flags.",30,null],[11,"extend","","",30,null],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",30,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"hash","","",31,null],[11,"fmt","","",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,null],[11,"is_all","","Returns `true` if all flags are currently set.",31,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,null],[11,"insert","","Inserts the specified flags in-place.",31,null],[11,"remove","","Removes the specified flags in-place.",31,null],[11,"toggle","","Toggles the specified flags in-place.",31,null],[11,"bitor","","Returns the union of the two sets of flags.",31,null],[11,"bitor_assign","","Adds the set of flags.",31,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,null],[11,"bitxor_assign","","Toggles the set of flags.",31,null],[11,"bitand","","Returns the intersection between the two sets of flags.",31,null],[11,"bitand_assign","","Disables all flags disabled in the set.",31,null],[11,"sub","","Returns the set difference of the two sets of flags.",31,null],[11,"sub_assign","","Disables all flags enabled in the set.",31,null],[11,"not","","Returns the complement of this set of flags.",31,null],[11,"extend","","",31,null],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",31,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",27,null],[11,"ping","","ping client",29,null],[11,"configure","","suggest resize",29,null],[11,"popup_done","","popup interaction is done",29,null],[0,"wl_surface","wayland_server::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_server::protocol::wl_surface","",null,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","",32,null],[13,"InvalidTransform","","",32,null],[8,"Handler","","",null,null],[11,"destroy","","delete surface",33,null],[11,"attach","","set the surface contents",33,null],[11,"damage","","mark part of the surface damaged",33,null],[11,"frame","","request a frame throttling hint",33,null],[11,"set_opaque_region","","set opaque region",33,null],[11,"set_input_region","","set input region",33,null],[11,"commit","","commit pending surface state",33,null],[11,"set_buffer_transform","","sets the buffer transformation",33,null],[11,"set_buffer_scale","","sets the buffer scaling factor",33,null],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",33,null],[11,"ptr","","",34,null],[11,"from_ptr_new","","",34,null],[11,"from_ptr_initialized","","",34,null],[11,"interface_ptr","","",34,null],[11,"interface_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",34,null],[11,"is_alive","","",34,null],[11,"equals","","",34,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"from_raw","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",32,null],[11,"enter","","surface enters an output",34,null],[11,"leave","","surface leaves an output",34,null],[0,"wl_seat","wayland_server::protocol","group of input devices",null,null],[3,"WlSeat","wayland_server::protocol::wl_seat","",null,null],[3,"Capability","","seat capability bitmask",null,null],[17,"Pointer","","",null,null],[17,"Keyboard","","",null,null],[17,"Touch","","",null,null],[8,"Handler","","",null,null],[11,"get_pointer","","return pointer object",35,null],[11,"get_keyboard","","return keyboard object",35,null],[11,"get_touch","","return touch object",35,null],[11,"release","","release the seat object",35,null],[11,"ptr","","",36,null],[11,"from_ptr_new","","",36,null],[11,"from_ptr_initialized","","",36,null],[11,"interface_ptr","","",36,null],[11,"interface_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",36,null],[11,"is_alive","","",36,null],[11,"equals","","",36,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"partial_cmp","","",37,null],[11,"lt","","",37,null],[11,"le","","",37,null],[11,"gt","","",37,null],[11,"ge","","",37,null],[11,"cmp","","",37,null],[11,"hash","","",37,null],[11,"fmt","","",37,null],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,null],[11,"is_all","","Returns `true` if all flags are currently set.",37,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,null],[11,"insert","","Inserts the specified flags in-place.",37,null],[11,"remove","","Removes the specified flags in-place.",37,null],[11,"toggle","","Toggles the specified flags in-place.",37,null],[11,"bitor","","Returns the union of the two sets of flags.",37,null],[11,"bitor_assign","","Adds the set of flags.",37,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,null],[11,"bitxor_assign","","Toggles the set of flags.",37,null],[11,"bitand","","Returns the intersection between the two sets of flags.",37,null],[11,"bitand_assign","","Disables all flags disabled in the set.",37,null],[11,"sub","","Returns the set difference of the two sets of flags.",37,null],[11,"sub_assign","","Disables all flags enabled in the set.",37,null],[11,"not","","Returns the complement of this set of flags.",37,null],[11,"extend","","",37,null],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",37,null],[11,"capabilities","","seat capabilities changed",36,null],[11,"name","","unique identifier for this seat",36,null],[0,"wl_pointer","wayland_server::protocol","pointer input device",null,null],[3,"WlPointer","wayland_server::protocol::wl_pointer","",null,null],[4,"Error","","",null,null],[13,"Role","","",38,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","",39,null],[13,"Pressed","","",39,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","",40,null],[13,"HorizontalScroll","","",40,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","",41,null],[13,"Finger","","",41,null],[13,"Continuous","","",41,null],[8,"Handler","","",null,null],[11,"set_cursor","","set the pointer surface",42,null],[11,"release","","release the pointer object",42,null],[11,"ptr","","",43,null],[11,"from_ptr_new","","",43,null],[11,"from_ptr_initialized","","",43,null],[11,"interface_ptr","","",43,null],[11,"interface_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",43,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",43,null],[11,"is_alive","","",43,null],[11,"equals","","",43,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"from_raw","","",38,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",38,null],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"from_raw","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",39,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"from_raw","","",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",40,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",41,null],[11,"enter","","enter event",43,null],[11,"leave","","leave event",43,null],[11,"motion","","pointer motion event",43,null],[11,"button","","pointer button event",43,null],[11,"axis","","axis event",43,null],[11,"frame","","end of a pointer event sequence",43,null],[11,"axis_source","","axis source event",43,null],[11,"axis_stop","","axis stop event",43,null],[11,"axis_discrete","","axis click event",43,null],[0,"wl_keyboard","wayland_server::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_server::protocol::wl_keyboard","",null,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","",44,null],[13,"XkbV1","","",44,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","",45,null],[13,"Pressed","","",45,null],[8,"Handler","","",null,null],[11,"release","","release the keyboard object",46,null],[11,"ptr","","",47,null],[11,"from_ptr_new","","",47,null],[11,"from_ptr_initialized","","",47,null],[11,"interface_ptr","","",47,null],[11,"interface_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",47,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",47,null],[11,"is_alive","","",47,null],[11,"equals","","",47,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",44,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"from_raw","","",45,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",45,null],[11,"keymap","","keyboard mapping",47,null],[11,"enter","","enter event",47,null],[11,"leave","","leave event",47,null],[11,"key","","key event",47,null],[11,"modifiers","","modifier and group state",47,null],[11,"repeat_info","","repeat rate and delay",47,null],[0,"wl_touch","wayland_server::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_server::protocol::wl_touch","",null,null],[8,"Handler","","",null,null],[11,"release","","release the touch object",48,null],[11,"ptr","","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",49,null],[11,"is_alive","","",49,null],[11,"equals","","",49,null],[11,"down","","touch down event and beginning of a touch sequence",49,null],[11,"up","","end of a touch event sequence",49,null],[11,"motion","","update of touch point coordinates",49,null],[11,"frame","","end of touch frame event",49,null],[11,"cancel","","touch session cancelled",49,null],[0,"wl_output","wayland_server::protocol","compositor output region",null,null],[3,"WlOutput","wayland_server::protocol::wl_output","",null,null],[3,"Mode","","mode information",null,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","",50,null],[13,"None","","",50,null],[13,"HorizontalRgb","","",50,null],[13,"HorizontalBgr","","",50,null],[13,"VerticalRgb","","",50,null],[13,"VerticalBgr","","",50,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","",51,null],[13,"_90","","",51,null],[13,"_180","","",51,null],[13,"_270","","",51,null],[13,"Flipped","","",51,null],[13,"Flipped90","","",51,null],[13,"Flipped180","","",51,null],[13,"Flipped270","","",51,null],[17,"Current","","",null,null],[17,"Preferred","","",null,null],[8,"Handler","","",null,null],[11,"release","","release the output object",52,null],[11,"ptr","","",53,null],[11,"from_ptr_new","","",53,null],[11,"from_ptr_initialized","","",53,null],[11,"interface_ptr","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",53,null],[11,"is_alive","","",53,null],[11,"equals","","",53,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"from_raw","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"from_raw","","",51,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",51,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"partial_cmp","","",54,null],[11,"lt","","",54,null],[11,"le","","",54,null],[11,"gt","","",54,null],[11,"ge","","",54,null],[11,"cmp","","",54,null],[11,"hash","","",54,null],[11,"fmt","","",54,null],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",54,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,null],[11,"is_all","","Returns `true` if all flags are currently set.",54,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,null],[11,"insert","","Inserts the specified flags in-place.",54,null],[11,"remove","","Removes the specified flags in-place.",54,null],[11,"toggle","","Toggles the specified flags in-place.",54,null],[11,"bitor","","Returns the union of the two sets of flags.",54,null],[11,"bitor_assign","","Adds the set of flags.",54,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,null],[11,"bitxor_assign","","Toggles the set of flags.",54,null],[11,"bitand","","Returns the intersection between the two sets of flags.",54,null],[11,"bitand_assign","","Disables all flags disabled in the set.",54,null],[11,"sub","","Returns the set difference of the two sets of flags.",54,null],[11,"sub_assign","","Disables all flags enabled in the set.",54,null],[11,"not","","Returns the complement of this set of flags.",54,null],[11,"extend","","",54,null],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",54,null],[11,"geometry","","properties of the output",53,null],[11,"mode","","advertise available modes for the output",53,null],[11,"done","","sent all information about output",53,null],[11,"scale","","output scaling properties",53,null],[0,"wl_region","wayland_server::protocol","region interface",null,null],[3,"WlRegion","wayland_server::protocol::wl_region","",null,null],[8,"Handler","","",null,null],[11,"destroy","","destroy region",55,null],[11,"add","","add rectangle to region",55,null],[11,"subtract","","subtract rectangle from region",55,null],[11,"ptr","","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",56,null],[11,"is_alive","","",56,null],[11,"equals","","",56,null],[0,"wl_subcompositor","wayland_server::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_server::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","",57,null],[8,"Handler","","",null,null],[11,"destroy","","unbind from the subcompositor interface",58,null],[11,"get_subsurface","","give a surface the role sub-surface",58,null],[11,"ptr","","",59,null],[11,"from_ptr_new","","",59,null],[11,"from_ptr_initialized","","",59,null],[11,"interface_ptr","","",59,null],[11,"interface_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",59,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",59,null],[11,"is_alive","","",59,null],[11,"equals","","",59,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"from_raw","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",57,null],[0,"wl_subsurface","wayland_server::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_server::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","",60,null],[8,"Handler","","",null,null],[11,"destroy","","remove sub-surface interface",61,null],[11,"set_position","","reposition the sub-surface",61,null],[11,"place_above","","restack the sub-surface",61,null],[11,"place_below","","restack the sub-surface",61,null],[11,"set_sync","","set sub-surface to synchronized mode",61,null],[11,"set_desync","","set sub-surface to desynchronized mode",61,null],[11,"ptr","","",62,null],[11,"from_ptr_new","","",62,null],[11,"from_ptr_initialized","","",62,null],[11,"interface_ptr","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",62,null],[11,"is_alive","","",62,null],[11,"equals","","",62,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"from_raw","","",60,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",60,null],[11,"ptr","wayland_server","Get a pointer to the C wl_client object",63,null],[11,"post_no_memory","","Post a &quot;no memory&quot; message to the client",63,null],[11,"from_ptr","","Create a client object from a pointer",63,null],[11,"flush_clients","","Flush events to the clients",64,null],[11,"drop","","",64,null],[11,"destroy","","Destroy the associated global object.",65,null],[11,"register","","Register a resource to a handler of this event loop.",66,null],[11,"add_handler","","Insert a new handler to this EventLoop",66,null],[11,"add_handler_with_init","","Insert a new handler with init",66,null],[11,"stop_loop","","Stop looping",66,null],[11,"get_handler","","Get a reference to a handler",67,null],[11,"get_mut_handler","","Get a mutable reference to a handler",67,null],[11,"dispatch","","Dispatch pending requests to their respective handlers",68,null],[11,"run","","Runs the event loop",68,null],[11,"register_global","","Register a global object to the display.",68,null],[11,"state","","Get an handle to the internal state",68,null],[11,"deref","","",68,null],[11,"deref_mut","","",68,null],[11,"ptr","wayland_server::protocol::wl_callback","",1,null],[11,"from_ptr_new","","",1,null],[11,"from_ptr_initialized","","",1,null],[11,"interface_ptr","","",1,null],[11,"interface_name","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",1,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",1,null],[11,"is_alive","","",1,null],[11,"equals","","",1,null],[11,"done","","done event",1,null],[11,"create_surface","wayland_server::protocol::wl_compositor","create new surface",2,null],[11,"create_region","","create new region",2,null],[11,"ptr","","",3,null],[11,"from_ptr_new","","",3,null],[11,"from_ptr_initialized","","",3,null],[11,"interface_ptr","","",3,null],[11,"interface_name","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",3,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",3,null],[11,"is_alive","","",3,null],[11,"equals","","",3,null],[11,"create_buffer","wayland_server::protocol::wl_shm_pool","create a buffer from the pool",4,null],[11,"destroy","","destroy the pool",4,null],[11,"resize","","change the size of the pool mapping",4,null],[11,"ptr","","",5,null],[11,"from_ptr_new","","",5,null],[11,"from_ptr_initialized","","",5,null],[11,"interface_ptr","","",5,null],[11,"interface_name","","",5,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",5,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",5,null],[11,"is_alive","","",5,null],[11,"equals","","",5,null],[11,"create_pool","wayland_server::protocol::wl_shm","create a shm pool",8,null],[11,"ptr","","",9,null],[11,"from_ptr_new","","",9,null],[11,"from_ptr_initialized","","",9,null],[11,"interface_ptr","","",9,null],[11,"interface_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",9,null],[11,"is_alive","","",9,null],[11,"equals","","",9,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"from_raw","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"from_raw","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",7,null],[11,"format","","pixel format description",9,null],[11,"destroy","wayland_server::protocol::wl_buffer","destroy a buffer",10,null],[11,"ptr","","",11,null],[11,"from_ptr_new","","",11,null],[11,"from_ptr_initialized","","",11,null],[11,"interface_ptr","","",11,null],[11,"interface_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",11,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",11,null],[11,"is_alive","","",11,null],[11,"equals","","",11,null],[11,"release","","compositor releases buffer",11,null],[11,"accept","wayland_server::protocol::wl_data_offer","accept one of the offered mime types",13,null],[11,"receive","","request that the data is transferred",13,null],[11,"destroy","","destroy data offer",13,null],[11,"finish","","the offer will no longer be used",13,null],[11,"set_actions","","set the available/preferred drag-and-drop actions",13,null],[11,"ptr","","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",14,null],[11,"is_alive","","",14,null],[11,"equals","","",14,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"from_raw","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",12,null],[11,"offer","","advertise offered mime type",14,null],[11,"source_actions","","notify the source-side available actions",14,null],[11,"action","","notify the selected action",14,null],[11,"offer","wayland_server::protocol::wl_data_source","add an offered mime type",16,null],[11,"destroy","","destroy the data source",16,null],[11,"set_actions","","set the available drag-and-drop actions",16,null],[11,"ptr","","",17,null],[11,"from_ptr_new","","",17,null],[11,"from_ptr_initialized","","",17,null],[11,"interface_ptr","","",17,null],[11,"interface_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",17,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",17,null],[11,"is_alive","","",17,null],[11,"equals","","",17,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"from_raw","","",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",15,null],[11,"target","","a target accepts an offered mime type",17,null],[11,"send","","send the data",17,null],[11,"cancelled","","selection was cancelled",17,null],[11,"dnd_drop_performed","","the drag-and-drop operation physically finished",17,null],[11,"dnd_finished","","the drag-and-drop operation concluded",17,null],[11,"action","","notify the selected action",17,null],[11,"start_drag","wayland_server::protocol::wl_data_device","start drag-and-drop operation",19,null],[11,"set_selection","","copy data to the selection",19,null],[11,"release","","destroy data device",19,null],[11,"ptr","","",20,null],[11,"from_ptr_new","","",20,null],[11,"from_ptr_initialized","","",20,null],[11,"interface_ptr","","",20,null],[11,"interface_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",20,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",20,null],[11,"is_alive","","",20,null],[11,"equals","","",20,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"from_raw","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",18,null],[11,"data_offer","","introduce a new wl_data_offer",20,null],[11,"enter","","initiate drag-and-drop session",20,null],[11,"leave","","end drag-and-drop session",20,null],[11,"motion","","drag-and-drop session motion",20,null],[11,"drop","","end drag-and-drop session successfully",20,null],[11,"selection","","advertise new selection",20,null],[11,"create_data_source","wayland_server::protocol::wl_data_device_manager","create a new data source",21,null],[11,"get_data_device","","create a new data device",21,null],[11,"ptr","","",22,null],[11,"from_ptr_new","","",22,null],[11,"from_ptr_initialized","","",22,null],[11,"interface_ptr","","",22,null],[11,"interface_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",22,null],[11,"is_alive","","",22,null],[11,"equals","","",22,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"partial_cmp","","",23,null],[11,"lt","","",23,null],[11,"le","","",23,null],[11,"gt","","",23,null],[11,"ge","","",23,null],[11,"cmp","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"empty","","Returns an empty set of flags.",23,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",23,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",23,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",23,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,null],[11,"is_all","","Returns `true` if all flags are currently set.",23,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,null],[11,"insert","","Inserts the specified flags in-place.",23,null],[11,"remove","","Removes the specified flags in-place.",23,null],[11,"toggle","","Toggles the specified flags in-place.",23,null],[11,"bitor","","Returns the union of the two sets of flags.",23,null],[11,"bitor_assign","","Adds the set of flags.",23,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,null],[11,"bitxor_assign","","Toggles the set of flags.",23,null],[11,"bitand","","Returns the intersection between the two sets of flags.",23,null],[11,"bitand_assign","","Disables all flags disabled in the set.",23,null],[11,"sub","","Returns the set difference of the two sets of flags.",23,null],[11,"sub_assign","","Disables all flags enabled in the set.",23,null],[11,"not","","Returns the complement of this set of flags.",23,null],[11,"extend","","",23,null],[11,"from_iter","","",23,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",23,null],[11,"get_shell_surface","wayland_server::protocol::wl_shell","create a shell surface from a surface",25,null],[11,"ptr","","",26,null],[11,"from_ptr_new","","",26,null],[11,"from_ptr_initialized","","",26,null],[11,"interface_ptr","","",26,null],[11,"interface_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",26,null],[11,"is_alive","","",26,null],[11,"equals","","",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"from_raw","","",24,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",24,null],[11,"pong","wayland_server::protocol::wl_shell_surface","respond to a ping event",28,null],[11,"move_","","start an interactive move",28,null],[11,"resize","","start an interactive resize",28,null],[11,"set_toplevel","","make the surface a toplevel surface",28,null],[11,"set_transient","","make the surface a transient surface",28,null],[11,"set_fullscreen","","make the surface a fullscreen surface",28,null],[11,"set_popup","","make the surface a popup surface",28,null],[11,"set_maximized","","make the surface a maximized surface",28,null],[11,"set_title","","set surface title",28,null],[11,"set_class","","set surface class",28,null],[11,"ptr","","",29,null],[11,"from_ptr_new","","",29,null],[11,"from_ptr_initialized","","",29,null],[11,"interface_ptr","","",29,null],[11,"interface_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",29,null],[11,"is_alive","","",29,null],[11,"equals","","",29,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"clone","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"cmp","","",30,null],[11,"hash","","",30,null],[11,"fmt","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,null],[11,"is_all","","Returns `true` if all flags are currently set.",30,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,null],[11,"insert","","Inserts the specified flags in-place.",30,null],[11,"remove","","Removes the specified flags in-place.",30,null],[11,"toggle","","Toggles the specified flags in-place.",30,null],[11,"bitor","","Returns the union of the two sets of flags.",30,null],[11,"bitor_assign","","Adds the set of flags.",30,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,null],[11,"bitxor_assign","","Toggles the set of flags.",30,null],[11,"bitand","","Returns the intersection between the two sets of flags.",30,null],[11,"bitand_assign","","Disables all flags disabled in the set.",30,null],[11,"sub","","Returns the set difference of the two sets of flags.",30,null],[11,"sub_assign","","Disables all flags enabled in the set.",30,null],[11,"not","","Returns the complement of this set of flags.",30,null],[11,"extend","","",30,null],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",30,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"hash","","",31,null],[11,"fmt","","",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,null],[11,"is_all","","Returns `true` if all flags are currently set.",31,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,null],[11,"insert","","Inserts the specified flags in-place.",31,null],[11,"remove","","Removes the specified flags in-place.",31,null],[11,"toggle","","Toggles the specified flags in-place.",31,null],[11,"bitor","","Returns the union of the two sets of flags.",31,null],[11,"bitor_assign","","Adds the set of flags.",31,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,null],[11,"bitxor_assign","","Toggles the set of flags.",31,null],[11,"bitand","","Returns the intersection between the two sets of flags.",31,null],[11,"bitand_assign","","Disables all flags disabled in the set.",31,null],[11,"sub","","Returns the set difference of the two sets of flags.",31,null],[11,"sub_assign","","Disables all flags enabled in the set.",31,null],[11,"not","","Returns the complement of this set of flags.",31,null],[11,"extend","","",31,null],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",31,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",27,null],[11,"ping","","ping client",29,null],[11,"configure","","suggest resize",29,null],[11,"popup_done","","popup interaction is done",29,null],[11,"destroy","wayland_server::protocol::wl_surface","delete surface",33,null],[11,"attach","","set the surface contents",33,null],[11,"damage","","mark part of the surface damaged",33,null],[11,"frame","","request a frame throttling hint",33,null],[11,"set_opaque_region","","set opaque region",33,null],[11,"set_input_region","","set input region",33,null],[11,"commit","","commit pending surface state",33,null],[11,"set_buffer_transform","","sets the buffer transformation",33,null],[11,"set_buffer_scale","","sets the buffer scaling factor",33,null],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",33,null],[11,"ptr","","",34,null],[11,"from_ptr_new","","",34,null],[11,"from_ptr_initialized","","",34,null],[11,"interface_ptr","","",34,null],[11,"interface_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",34,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",34,null],[11,"is_alive","","",34,null],[11,"equals","","",34,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"from_raw","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",32,null],[11,"enter","","surface enters an output",34,null],[11,"leave","","surface leaves an output",34,null],[11,"get_pointer","wayland_server::protocol::wl_seat","return pointer object",35,null],[11,"get_keyboard","","return keyboard object",35,null],[11,"get_touch","","return touch object",35,null],[11,"release","","release the seat object",35,null],[11,"ptr","","",36,null],[11,"from_ptr_new","","",36,null],[11,"from_ptr_initialized","","",36,null],[11,"interface_ptr","","",36,null],[11,"interface_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",36,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",36,null],[11,"is_alive","","",36,null],[11,"equals","","",36,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"partial_cmp","","",37,null],[11,"lt","","",37,null],[11,"le","","",37,null],[11,"gt","","",37,null],[11,"ge","","",37,null],[11,"cmp","","",37,null],[11,"hash","","",37,null],[11,"fmt","","",37,null],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,null],[11,"is_all","","Returns `true` if all flags are currently set.",37,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,null],[11,"insert","","Inserts the specified flags in-place.",37,null],[11,"remove","","Removes the specified flags in-place.",37,null],[11,"toggle","","Toggles the specified flags in-place.",37,null],[11,"bitor","","Returns the union of the two sets of flags.",37,null],[11,"bitor_assign","","Adds the set of flags.",37,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,null],[11,"bitxor_assign","","Toggles the set of flags.",37,null],[11,"bitand","","Returns the intersection between the two sets of flags.",37,null],[11,"bitand_assign","","Disables all flags disabled in the set.",37,null],[11,"sub","","Returns the set difference of the two sets of flags.",37,null],[11,"sub_assign","","Disables all flags enabled in the set.",37,null],[11,"not","","Returns the complement of this set of flags.",37,null],[11,"extend","","",37,null],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",37,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",37,null],[11,"capabilities","","seat capabilities changed",36,null],[11,"name","","unique identifier for this seat",36,null],[11,"set_cursor","wayland_server::protocol::wl_pointer","set the pointer surface",42,null],[11,"release","","release the pointer object",42,null],[11,"ptr","","",43,null],[11,"from_ptr_new","","",43,null],[11,"from_ptr_initialized","","",43,null],[11,"interface_ptr","","",43,null],[11,"interface_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",43,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",43,null],[11,"is_alive","","",43,null],[11,"equals","","",43,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"from_raw","","",38,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",38,null],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"from_raw","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",39,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"from_raw","","",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",40,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",41,null],[11,"enter","","enter event",43,null],[11,"leave","","leave event",43,null],[11,"motion","","pointer motion event",43,null],[11,"button","","pointer button event",43,null],[11,"axis","","axis event",43,null],[11,"frame","","end of a pointer event sequence",43,null],[11,"axis_source","","axis source event",43,null],[11,"axis_stop","","axis stop event",43,null],[11,"axis_discrete","","axis click event",43,null],[11,"release","wayland_server::protocol::wl_keyboard","release the keyboard object",46,null],[11,"ptr","","",47,null],[11,"from_ptr_new","","",47,null],[11,"from_ptr_initialized","","",47,null],[11,"interface_ptr","","",47,null],[11,"interface_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",47,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",47,null],[11,"is_alive","","",47,null],[11,"equals","","",47,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",44,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"from_raw","","",45,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",45,null],[11,"keymap","","keyboard mapping",47,null],[11,"enter","","enter event",47,null],[11,"leave","","leave event",47,null],[11,"key","","key event",47,null],[11,"modifiers","","modifier and group state",47,null],[11,"repeat_info","","repeat rate and delay",47,null],[11,"release","wayland_server::protocol::wl_touch","release the touch object",48,null],[11,"ptr","","",49,null],[11,"from_ptr_new","","",49,null],[11,"from_ptr_initialized","","",49,null],[11,"interface_ptr","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",49,null],[11,"is_alive","","",49,null],[11,"equals","","",49,null],[11,"down","","touch down event and beginning of a touch sequence",49,null],[11,"up","","end of a touch event sequence",49,null],[11,"motion","","update of touch point coordinates",49,null],[11,"frame","","end of touch frame event",49,null],[11,"cancel","","touch session cancelled",49,null],[11,"release","wayland_server::protocol::wl_output","release the output object",52,null],[11,"ptr","","",53,null],[11,"from_ptr_new","","",53,null],[11,"from_ptr_initialized","","",53,null],[11,"interface_ptr","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",53,null],[11,"is_alive","","",53,null],[11,"equals","","",53,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"from_raw","","",50,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"from_raw","","",51,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",51,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"partial_cmp","","",54,null],[11,"lt","","",54,null],[11,"le","","",54,null],[11,"gt","","",54,null],[11,"ge","","",54,null],[11,"cmp","","",54,null],[11,"hash","","",54,null],[11,"fmt","","",54,null],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",54,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,null],[11,"is_all","","Returns `true` if all flags are currently set.",54,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,null],[11,"insert","","Inserts the specified flags in-place.",54,null],[11,"remove","","Removes the specified flags in-place.",54,null],[11,"toggle","","Toggles the specified flags in-place.",54,null],[11,"bitor","","Returns the union of the two sets of flags.",54,null],[11,"bitor_assign","","Adds the set of flags.",54,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,null],[11,"bitxor_assign","","Toggles the set of flags.",54,null],[11,"bitand","","Returns the intersection between the two sets of flags.",54,null],[11,"bitand_assign","","Disables all flags disabled in the set.",54,null],[11,"sub","","Returns the set difference of the two sets of flags.",54,null],[11,"sub_assign","","Disables all flags enabled in the set.",54,null],[11,"not","","Returns the complement of this set of flags.",54,null],[11,"extend","","",54,null],[11,"from_iter","","",54,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",54,null],[11,"geometry","","properties of the output",53,null],[11,"mode","","advertise available modes for the output",53,null],[11,"done","","sent all information about output",53,null],[11,"scale","","output scaling properties",53,null],[11,"destroy","wayland_server::protocol::wl_region","destroy region",55,null],[11,"add","","add rectangle to region",55,null],[11,"subtract","","subtract rectangle from region",55,null],[11,"ptr","","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",56,null],[11,"is_alive","","",56,null],[11,"equals","","",56,null],[11,"destroy","wayland_server::protocol::wl_subcompositor","unbind from the subcompositor interface",58,null],[11,"get_subsurface","","give a surface the role sub-surface",58,null],[11,"ptr","","",59,null],[11,"from_ptr_new","","",59,null],[11,"from_ptr_initialized","","",59,null],[11,"interface_ptr","","",59,null],[11,"interface_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",59,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",59,null],[11,"is_alive","","",59,null],[11,"equals","","",59,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"from_raw","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",57,null],[11,"destroy","wayland_server::protocol::wl_subsurface","remove sub-surface interface",61,null],[11,"set_position","","reposition the sub-surface",61,null],[11,"place_above","","restack the sub-surface",61,null],[11,"place_below","","restack the sub-surface",61,null],[11,"set_sync","","set sub-surface to synchronized mode",61,null],[11,"set_desync","","set sub-surface to desynchronized mode",61,null],[11,"ptr","","",62,null],[11,"from_ptr_new","","",62,null],[11,"from_ptr_initialized","","",62,null],[11,"interface_ptr","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",62,null],[11,"is_alive","","",62,null],[11,"equals","","",62,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"from_raw","","",60,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",60,null],[0,"sys","wayland_server","Reexports of types and objects from wayland-sys",null,null],[8,"GlobalHandler","","Trait to handle a global object.",null,null],[10,"bind","","Request to bind a global",69,null],[8,"Init","","A trait to initialize handlers after they&#39;ve been inserted in an event queue",null,null],[10,"init","","Init the handler",70,null],[8,"Resource","","Common routines for wayland resource objects.",null,null],[10,"ptr","","Pointer to the underlying wayland proxy object",71,null],[10,"from_ptr_new","","Create an instance from a wayland pointer",71,null],[10,"from_ptr_initialized","","Create an instance from a wayland pointer",71,null],[10,"interface_ptr","","Pointer to the interface representation",71,null],[10,"interface_name","","Internal wayland name of this interface",71,{"inputs":[],"output":{"name":"str"}}],[10,"supported_version","","Max version of this interface supported",71,{"inputs":[],"output":{"name":"u32"}}],[10,"version","","Current version of the interface this resource is instanciated with",71,null],[10,"is_alive","","Check if the resource behind this handle is actually still alive",71,null],[10,"equals","","Check of two handles are actually the same wayland object",71,null],[8,"Handler","","Generic handler trait",null,null],[10,"message","","Dispatch a message.",72,null],[11,"expect","","Assert that result is successfull and extract the value.",0,null],[14,"declare_handler","","Registers a handler type so it can be used in event loops",null,null]],"paths":[[4,"EventResult"],[3,"WlCallback"],[8,"Handler"],[3,"WlCompositor"],[8,"Handler"],[3,"WlShmPool"],[4,"Error"],[4,"Format"],[8,"Handler"],[3,"WlShm"],[8,"Handler"],[3,"WlBuffer"],[4,"Error"],[8,"Handler"],[3,"WlDataOffer"],[4,"Error"],[8,"Handler"],[3,"WlDataSource"],[4,"Error"],[8,"Handler"],[3,"WlDataDevice"],[8,"Handler"],[3,"WlDataDeviceManager"],[3,"DndAction"],[4,"Error"],[8,"Handler"],[3,"WlShell"],[4,"FullscreenMethod"],[8,"Handler"],[3,"WlShellSurface"],[3,"Resize"],[3,"Transient"],[4,"Error"],[8,"Handler"],[3,"WlSurface"],[8,"Handler"],[3,"WlSeat"],[3,"Capability"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[8,"Handler"],[3,"WlPointer"],[4,"KeymapFormat"],[4,"KeyState"],[8,"Handler"],[3,"WlKeyboard"],[8,"Handler"],[3,"WlTouch"],[4,"Subpixel"],[4,"Transform"],[8,"Handler"],[3,"WlOutput"],[3,"Mode"],[8,"Handler"],[3,"WlRegion"],[4,"Error"],[8,"Handler"],[3,"WlSubcompositor"],[4,"Error"],[8,"Handler"],[3,"WlSubsurface"],[3,"Client"],[3,"Display"],[3,"Global"],[3,"EventLoopHandle"],[3,"StateGuard"],[3,"EventLoop"],[8,"GlobalHandler"],[8,"Init"],[8,"Resource"],[8,"Handler"]]};
searchIndex["wayland_client"] = {"doc":"Client-side Wayland connector","items":[[3,"EventQueue","wayland_client","An event queue managing wayland events",null,null],[3,"EventQueueHandle","","Handle to an event queue",null,null],[3,"StateGuard","","Guard to access internal state of an event queue",null,null],[3,"EnvHandler","","Utility type to handle the registry and global objects",null,null],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",null,null],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so`\nlibrary could not be found at runtime",0,null],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be\nfound.",0,null],[4,"FatalError","","Enum representing possible errors fatal to a wayland session",null,null],[13,"Io","","Session aborted after an I/O error",1,null],[13,"Protocol","","Session aborted after a protocol error",1,null],[12,"interface","wayland_client::FatalError","name of the interface of the proxy that generated this error",1,null],[12,"proxy_id","","internal id of the proxy that generated this error",1,null],[12,"error_code","","code of the error, as defined by the `Error` enum of the interface of the proxy.\nIt can directly be fed to the `from_raw` static method of this enum.",1,null],[4,"RequestResult","wayland_client","Possible outcome of the call of a request on a proxy",null,null],[13,"Sent","","Message has been buffered and will be sent to server",2,null],[13,"Destroyed","","This proxy is already destroyed, request has been ignored",2,null],[5,"default_connect","","Connect to the compositor socket",null,{"inputs":[],"output":{"name":"result"}}],[0,"protocol","","The wayland core protocol",null,null],[0,"wl_display","wayland_client::protocol","core global object",null,null],[3,"WlDisplay","wayland_client::protocol::wl_display","",null,null],[4,"Error","","global error values",null,null],[13,"InvalidObject","","",3,null],[13,"InvalidMethod","","",3,null],[13,"NoMemory","","",3,null],[11,"ptr","","",4,null],[11,"from_ptr_new","","",4,null],[11,"from_ptr_initialized","","",4,null],[11,"interface_ptr","","",4,null],[11,"interface_name","","",4,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",4,null],[11,"is_alive","","",4,null],[11,"equals","","",4,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"from_raw","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",3,null],[11,"sync","","asynchronous roundtrip",4,null],[11,"get_registry","","get global registry object",4,null],[0,"wl_registry","wayland_client::protocol","global registry object",null,null],[3,"WlRegistry","wayland_client::protocol::wl_registry","",null,null],[8,"Handler","","",null,null],[11,"global","","announce global object",5,null],[11,"global_remove","","announce removal of global object",5,null],[11,"ptr","","",6,null],[11,"from_ptr_new","","",6,null],[11,"from_ptr_initialized","","",6,null],[11,"interface_ptr","","",6,null],[11,"interface_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",6,null],[11,"is_alive","","",6,null],[11,"equals","","",6,null],[11,"bind","","bind an object to the display",6,null],[0,"wl_callback","wayland_client::protocol","callback object",null,null],[3,"WlCallback","wayland_client::protocol::wl_callback","",null,null],[8,"Handler","","",null,null],[11,"done","","done event",7,null],[11,"ptr","","",8,null],[11,"from_ptr_new","","",8,null],[11,"from_ptr_initialized","","",8,null],[11,"interface_ptr","","",8,null],[11,"interface_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",8,null],[11,"is_alive","","",8,null],[11,"equals","","",8,null],[0,"wl_compositor","wayland_client::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_client::protocol::wl_compositor","",null,null],[11,"ptr","","",9,null],[11,"from_ptr_new","","",9,null],[11,"from_ptr_initialized","","",9,null],[11,"interface_ptr","","",9,null],[11,"interface_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",9,null],[11,"is_alive","","",9,null],[11,"equals","","",9,null],[11,"create_surface","","create new surface",9,null],[11,"create_region","","create new region",9,null],[0,"wl_shm_pool","wayland_client::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_client::protocol::wl_shm_pool","",null,null],[11,"ptr","","",10,null],[11,"from_ptr_new","","",10,null],[11,"from_ptr_initialized","","",10,null],[11,"interface_ptr","","",10,null],[11,"interface_name","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",10,null],[11,"is_alive","","",10,null],[11,"equals","","",10,null],[11,"create_buffer","","create a buffer from the pool",10,null],[11,"destroy","","destroy the pool",10,null],[11,"resize","","change the size of the pool mapping",10,null],[0,"wl_shm","wayland_client::protocol","shared memory support",null,null],[3,"WlShm","wayland_client::protocol::wl_shm","",null,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","",11,null],[13,"InvalidStride","","",11,null],[13,"InvalidFd","","",11,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","",12,null],[13,"Xrgb8888","","",12,null],[13,"C8","","",12,null],[13,"Rgb332","","",12,null],[13,"Bgr233","","",12,null],[13,"Xrgb4444","","",12,null],[13,"Xbgr4444","","",12,null],[13,"Rgbx4444","","",12,null],[13,"Bgrx4444","","",12,null],[13,"Argb4444","","",12,null],[13,"Abgr4444","","",12,null],[13,"Rgba4444","","",12,null],[13,"Bgra4444","","",12,null],[13,"Xrgb1555","","",12,null],[13,"Xbgr1555","","",12,null],[13,"Rgbx5551","","",12,null],[13,"Bgrx5551","","",12,null],[13,"Argb1555","","",12,null],[13,"Abgr1555","","",12,null],[13,"Rgba5551","","",12,null],[13,"Bgra5551","","",12,null],[13,"Rgb565","","",12,null],[13,"Bgr565","","",12,null],[13,"Rgb888","","",12,null],[13,"Bgr888","","",12,null],[13,"Xbgr8888","","",12,null],[13,"Rgbx8888","","",12,null],[13,"Bgrx8888","","",12,null],[13,"Abgr8888","","",12,null],[13,"Rgba8888","","",12,null],[13,"Bgra8888","","",12,null],[13,"Xrgb2101010","","",12,null],[13,"Xbgr2101010","","",12,null],[13,"Rgbx1010102","","",12,null],[13,"Bgrx1010102","","",12,null],[13,"Argb2101010","","",12,null],[13,"Abgr2101010","","",12,null],[13,"Rgba1010102","","",12,null],[13,"Bgra1010102","","",12,null],[13,"Yuyv","","",12,null],[13,"Yvyu","","",12,null],[13,"Uyvy","","",12,null],[13,"Vyuy","","",12,null],[13,"Ayuv","","",12,null],[13,"Nv12","","",12,null],[13,"Nv21","","",12,null],[13,"Nv16","","",12,null],[13,"Nv61","","",12,null],[13,"Yuv410","","",12,null],[13,"Yvu410","","",12,null],[13,"Yuv411","","",12,null],[13,"Yvu411","","",12,null],[13,"Yuv420","","",12,null],[13,"Yvu420","","",12,null],[13,"Yuv422","","",12,null],[13,"Yvu422","","",12,null],[13,"Yuv444","","",12,null],[13,"Yvu444","","",12,null],[8,"Handler","","",null,null],[11,"format","","pixel format description",13,null],[11,"ptr","","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",14,null],[11,"is_alive","","",14,null],[11,"equals","","",14,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"from_raw","","",11,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"from_raw","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",12,null],[11,"create_pool","","create a shm pool",14,null],[0,"wl_buffer","wayland_client::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_client::protocol::wl_buffer","",null,null],[8,"Handler","","",null,null],[11,"release","","compositor releases buffer",15,null],[11,"ptr","","",16,null],[11,"from_ptr_new","","",16,null],[11,"from_ptr_initialized","","",16,null],[11,"interface_ptr","","",16,null],[11,"interface_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",16,null],[11,"is_alive","","",16,null],[11,"equals","","",16,null],[11,"destroy","","destroy a buffer",16,null],[0,"wl_data_offer","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_client::protocol::wl_data_offer","",null,null],[4,"Error","","",null,null],[13,"InvalidFinish","","",17,null],[13,"InvalidActionMask","","",17,null],[13,"InvalidAction","","",17,null],[13,"InvalidOffer","","",17,null],[8,"Handler","","",null,null],[11,"offer","","advertise offered mime type",18,null],[11,"source_actions","","notify the source-side available actions",18,null],[11,"action","","notify the selected action",18,null],[11,"ptr","","",19,null],[11,"from_ptr_new","","",19,null],[11,"from_ptr_initialized","","",19,null],[11,"interface_ptr","","",19,null],[11,"interface_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",19,null],[11,"is_alive","","",19,null],[11,"equals","","",19,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"from_raw","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",17,null],[11,"accept","","accept one of the offered mime types",19,null],[11,"receive","","request that the data is transferred",19,null],[11,"destroy","","destroy data offer",19,null],[11,"finish","","the offer will no longer be used",19,null],[11,"set_actions","","set the available/preferred drag-and-drop actions",19,null],[0,"wl_data_source","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_client::protocol::wl_data_source","",null,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","",20,null],[13,"InvalidSource","","",20,null],[8,"Handler","","",null,null],[11,"target","","a target accepts an offered mime type",21,null],[11,"send","","send the data",21,null],[11,"cancelled","","selection was cancelled",21,null],[11,"dnd_drop_performed","","the drag-and-drop operation physically finished",21,null],[11,"dnd_finished","","the drag-and-drop operation concluded",21,null],[11,"action","","notify the selected action",21,null],[11,"ptr","","",22,null],[11,"from_ptr_new","","",22,null],[11,"from_ptr_initialized","","",22,null],[11,"interface_ptr","","",22,null],[11,"interface_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",22,null],[11,"is_alive","","",22,null],[11,"equals","","",22,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"from_raw","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",20,null],[11,"offer","","add an offered mime type",22,null],[11,"destroy","","destroy the data source",22,null],[11,"set_actions","","set the available drag-and-drop actions",22,null],[0,"wl_data_device","wayland_client::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_client::protocol::wl_data_device","",null,null],[4,"Error","","",null,null],[13,"Role","","",23,null],[8,"Handler","","",null,null],[11,"data_offer","","introduce a new wl_data_offer",24,null],[11,"enter","","initiate drag-and-drop session",24,null],[11,"leave","","end drag-and-drop session",24,null],[11,"motion","","drag-and-drop session motion",24,null],[11,"drop","","end drag-and-drop session successfully",24,null],[11,"selection","","advertise new selection",24,null],[11,"ptr","","",25,null],[11,"from_ptr_new","","",25,null],[11,"from_ptr_initialized","","",25,null],[11,"interface_ptr","","",25,null],[11,"interface_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",25,null],[11,"is_alive","","",25,null],[11,"equals","","",25,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",23,null],[11,"start_drag","","start drag-and-drop operation",25,null],[11,"set_selection","","copy data to the selection",25,null],[11,"release","","destroy data device",25,null],[0,"wl_data_device_manager","wayland_client::protocol","data transfer interface",null,null],[3,"WlDataDeviceManager","wayland_client::protocol::wl_data_device_manager","",null,null],[3,"DndAction","","drag and drop actions",null,null],[17,"None","","",null,null],[17,"Copy","","",null,null],[17,"Move","","",null,null],[17,"Ask","","",null,null],[11,"ptr","","",26,null],[11,"from_ptr_new","","",26,null],[11,"from_ptr_initialized","","",26,null],[11,"interface_ptr","","",26,null],[11,"interface_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",26,null],[11,"is_alive","","",26,null],[11,"equals","","",26,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"cmp","","",27,null],[11,"hash","","",27,null],[11,"fmt","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,null],[11,"is_all","","Returns `true` if all flags are currently set.",27,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,null],[11,"insert","","Inserts the specified flags in-place.",27,null],[11,"remove","","Removes the specified flags in-place.",27,null],[11,"toggle","","Toggles the specified flags in-place.",27,null],[11,"bitor","","Returns the union of the two sets of flags.",27,null],[11,"bitor_assign","","Adds the set of flags.",27,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,null],[11,"bitxor_assign","","Toggles the set of flags.",27,null],[11,"bitand","","Returns the intersection between the two sets of flags.",27,null],[11,"bitand_assign","","Disables all flags disabled in the set.",27,null],[11,"sub","","Returns the set difference of the two sets of flags.",27,null],[11,"sub_assign","","Disables all flags enabled in the set.",27,null],[11,"not","","Returns the complement of this set of flags.",27,null],[11,"extend","","",27,null],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",27,null],[11,"create_data_source","","create a new data source",26,null],[11,"get_data_device","","create a new data device",26,null],[0,"wl_shell","wayland_client::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_client::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","",28,null],[11,"ptr","","",29,null],[11,"from_ptr_new","","",29,null],[11,"from_ptr_initialized","","",29,null],[11,"interface_ptr","","",29,null],[11,"interface_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",29,null],[11,"is_alive","","",29,null],[11,"equals","","",29,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"from_raw","","",28,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",28,null],[11,"get_shell_surface","","create a shell surface from a surface",29,null],[0,"wl_shell_surface","wayland_client::protocol","desktop-style metadata interface",null,null],[3,"WlShellSurface","wayland_client::protocol::wl_shell_surface","",null,null],[3,"Resize","","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","",30,null],[13,"Scale","","",30,null],[13,"Driver","","",30,null],[13,"Fill","","",30,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[17,"Inactive","","",null,null],[8,"Handler","","",null,null],[11,"ping","","ping client",31,null],[11,"configure","","suggest resize",31,null],[11,"popup_done","","popup interaction is done",31,null],[11,"ptr","","",32,null],[11,"from_ptr_new","","",32,null],[11,"from_ptr_initialized","","",32,null],[11,"interface_ptr","","",32,null],[11,"interface_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",32,null],[11,"is_alive","","",32,null],[11,"equals","","",32,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"hash","","",33,null],[11,"fmt","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,null],[11,"is_all","","Returns `true` if all flags are currently set.",33,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,null],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,null],[11,"bitor_assign","","Adds the set of flags.",33,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,null],[11,"bitxor_assign","","Toggles the set of flags.",33,null],[11,"bitand","","Returns the intersection between the two sets of flags.",33,null],[11,"bitand_assign","","Disables all flags disabled in the set.",33,null],[11,"sub","","Returns the set difference of the two sets of flags.",33,null],[11,"sub_assign","","Disables all flags enabled in the set.",33,null],[11,"not","","Returns the complement of this set of flags.",33,null],[11,"extend","","",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",33,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"cmp","","",34,null],[11,"hash","","",34,null],[11,"fmt","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,null],[11,"is_all","","Returns `true` if all flags are currently set.",34,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,null],[11,"insert","","Inserts the specified flags in-place.",34,null],[11,"remove","","Removes the specified flags in-place.",34,null],[11,"toggle","","Toggles the specified flags in-place.",34,null],[11,"bitor","","Returns the union of the two sets of flags.",34,null],[11,"bitor_assign","","Adds the set of flags.",34,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,null],[11,"bitxor_assign","","Toggles the set of flags.",34,null],[11,"bitand","","Returns the intersection between the two sets of flags.",34,null],[11,"bitand_assign","","Disables all flags disabled in the set.",34,null],[11,"sub","","Returns the set difference of the two sets of flags.",34,null],[11,"sub_assign","","Disables all flags enabled in the set.",34,null],[11,"not","","Returns the complement of this set of flags.",34,null],[11,"extend","","",34,null],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",34,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"from_raw","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",30,null],[11,"pong","","respond to a ping event",32,null],[11,"_move","","start an interactive move",32,null],[11,"resize","","start an interactive resize",32,null],[11,"set_toplevel","","make the surface a toplevel surface",32,null],[11,"set_transient","","make the surface a transient surface",32,null],[11,"set_fullscreen","","make the surface a fullscreen surface",32,null],[11,"set_popup","","make the surface a popup surface",32,null],[11,"set_maximized","","make the surface a maximized surface",32,null],[11,"set_title","","set surface title",32,null],[11,"set_class","","set surface class",32,null],[0,"wl_surface","wayland_client::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_client::protocol::wl_surface","",null,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","",35,null],[13,"InvalidTransform","","",35,null],[8,"Handler","","",null,null],[11,"enter","","surface enters an output",36,null],[11,"leave","","surface leaves an output",36,null],[11,"ptr","","",37,null],[11,"from_ptr_new","","",37,null],[11,"from_ptr_initialized","","",37,null],[11,"interface_ptr","","",37,null],[11,"interface_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",37,null],[11,"is_alive","","",37,null],[11,"equals","","",37,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"from_raw","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",35,null],[11,"destroy","","delete surface",37,null],[11,"attach","","set the surface contents",37,null],[11,"damage","","mark part of the surface damaged",37,null],[11,"frame","","request a frame throttling hint",37,null],[11,"set_opaque_region","","set opaque region",37,null],[11,"set_input_region","","set input region",37,null],[11,"commit","","commit pending surface state",37,null],[11,"set_buffer_transform","","sets the buffer transformation",37,null],[11,"set_buffer_scale","","sets the buffer scaling factor",37,null],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",37,null],[0,"wl_seat","wayland_client::protocol","group of input devices",null,null],[3,"WlSeat","wayland_client::protocol::wl_seat","",null,null],[3,"Capability","","seat capability bitmask",null,null],[17,"Pointer","","",null,null],[17,"Keyboard","","",null,null],[17,"Touch","","",null,null],[8,"Handler","","",null,null],[11,"capabilities","","seat capabilities changed",38,null],[11,"name","","unique identifier for this seat",38,null],[11,"ptr","","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",39,null],[11,"is_alive","","",39,null],[11,"equals","","",39,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"partial_cmp","","",40,null],[11,"lt","","",40,null],[11,"le","","",40,null],[11,"gt","","",40,null],[11,"ge","","",40,null],[11,"cmp","","",40,null],[11,"hash","","",40,null],[11,"fmt","","",40,null],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",40,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,null],[11,"is_all","","Returns `true` if all flags are currently set.",40,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,null],[11,"insert","","Inserts the specified flags in-place.",40,null],[11,"remove","","Removes the specified flags in-place.",40,null],[11,"toggle","","Toggles the specified flags in-place.",40,null],[11,"bitor","","Returns the union of the two sets of flags.",40,null],[11,"bitor_assign","","Adds the set of flags.",40,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,null],[11,"bitxor_assign","","Toggles the set of flags.",40,null],[11,"bitand","","Returns the intersection between the two sets of flags.",40,null],[11,"bitand_assign","","Disables all flags disabled in the set.",40,null],[11,"sub","","Returns the set difference of the two sets of flags.",40,null],[11,"sub_assign","","Disables all flags enabled in the set.",40,null],[11,"not","","Returns the complement of this set of flags.",40,null],[11,"extend","","",40,null],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",40,null],[11,"get_pointer","","return pointer object",39,null],[11,"get_keyboard","","return keyboard object",39,null],[11,"get_touch","","return touch object",39,null],[11,"release","","release the seat object",39,null],[0,"wl_pointer","wayland_client::protocol","pointer input device",null,null],[3,"WlPointer","wayland_client::protocol::wl_pointer","",null,null],[4,"Error","","",null,null],[13,"Role","","",41,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","",42,null],[13,"Pressed","","",42,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","",43,null],[13,"HorizontalScroll","","",43,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","",44,null],[13,"Finger","","",44,null],[13,"Continuous","","",44,null],[8,"Handler","","",null,null],[11,"enter","","enter event",45,null],[11,"leave","","leave event",45,null],[11,"motion","","pointer motion event",45,null],[11,"button","","pointer button event",45,null],[11,"axis","","axis event",45,null],[11,"frame","","end of a pointer event sequence",45,null],[11,"axis_source","","axis source event",45,null],[11,"axis_stop","","axis stop event",45,null],[11,"axis_discrete","","axis click event",45,null],[11,"ptr","","",46,null],[11,"from_ptr_new","","",46,null],[11,"from_ptr_initialized","","",46,null],[11,"interface_ptr","","",46,null],[11,"interface_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",46,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",46,null],[11,"is_alive","","",46,null],[11,"equals","","",46,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",41,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"from_raw","","",42,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",42,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"from_raw","","",43,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",44,null],[11,"set_cursor","","set the pointer surface",46,null],[11,"release","","release the pointer object",46,null],[0,"wl_keyboard","wayland_client::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_client::protocol::wl_keyboard","",null,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","",47,null],[13,"XkbV1","","",47,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","",48,null],[13,"Pressed","","",48,null],[8,"Handler","","",null,null],[11,"keymap","","keyboard mapping",49,null],[11,"enter","","enter event",49,null],[11,"leave","","leave event",49,null],[11,"key","","key event",49,null],[11,"modifiers","","modifier and group state",49,null],[11,"repeat_info","","repeat rate and delay",49,null],[11,"ptr","","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",50,null],[11,"is_alive","","",50,null],[11,"equals","","",50,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"from_raw","","",47,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"from_raw","","",48,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",48,null],[11,"release","","release the keyboard object",50,null],[0,"wl_touch","wayland_client::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_client::protocol::wl_touch","",null,null],[8,"Handler","","",null,null],[11,"down","","touch down event and beginning of a touch sequence",51,null],[11,"up","","end of a touch event sequence",51,null],[11,"motion","","update of touch point coordinates",51,null],[11,"frame","","end of touch frame event",51,null],[11,"cancel","","touch session cancelled",51,null],[11,"ptr","","",52,null],[11,"from_ptr_new","","",52,null],[11,"from_ptr_initialized","","",52,null],[11,"interface_ptr","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",52,null],[11,"is_alive","","",52,null],[11,"equals","","",52,null],[11,"release","","release the touch object",52,null],[0,"wl_output","wayland_client::protocol","compositor output region",null,null],[3,"WlOutput","wayland_client::protocol::wl_output","",null,null],[3,"Mode","","mode information",null,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","",53,null],[13,"None","","",53,null],[13,"HorizontalRgb","","",53,null],[13,"HorizontalBgr","","",53,null],[13,"VerticalRgb","","",53,null],[13,"VerticalBgr","","",53,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","",54,null],[13,"_90","","",54,null],[13,"_180","","",54,null],[13,"_270","","",54,null],[13,"Flipped","","",54,null],[13,"Flipped90","","",54,null],[13,"Flipped180","","",54,null],[13,"Flipped270","","",54,null],[17,"Current","","",null,null],[17,"Preferred","","",null,null],[8,"Handler","","",null,null],[11,"geometry","","properties of the output",55,null],[11,"mode","","advertise available modes for the output",55,null],[11,"done","","sent all information about output",55,null],[11,"scale","","output scaling properties",55,null],[11,"ptr","","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",56,null],[11,"is_alive","","",56,null],[11,"equals","","",56,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"from_raw","","",53,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",53,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"from_raw","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",54,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"fmt","","",57,null],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",57,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,null],[11,"is_all","","Returns `true` if all flags are currently set.",57,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,null],[11,"insert","","Inserts the specified flags in-place.",57,null],[11,"remove","","Removes the specified flags in-place.",57,null],[11,"toggle","","Toggles the specified flags in-place.",57,null],[11,"bitor","","Returns the union of the two sets of flags.",57,null],[11,"bitor_assign","","Adds the set of flags.",57,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,null],[11,"bitxor_assign","","Toggles the set of flags.",57,null],[11,"bitand","","Returns the intersection between the two sets of flags.",57,null],[11,"bitand_assign","","Disables all flags disabled in the set.",57,null],[11,"sub","","Returns the set difference of the two sets of flags.",57,null],[11,"sub_assign","","Disables all flags enabled in the set.",57,null],[11,"not","","Returns the complement of this set of flags.",57,null],[11,"extend","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",57,null],[11,"release","","release the output object",56,null],[0,"wl_region","wayland_client::protocol","region interface",null,null],[3,"WlRegion","wayland_client::protocol::wl_region","",null,null],[11,"ptr","","",58,null],[11,"from_ptr_new","","",58,null],[11,"from_ptr_initialized","","",58,null],[11,"interface_ptr","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",58,null],[11,"is_alive","","",58,null],[11,"equals","","",58,null],[11,"destroy","","destroy region",58,null],[11,"add","","add rectangle to region",58,null],[11,"subtract","","subtract rectangle from region",58,null],[0,"wl_subcompositor","wayland_client::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_client::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","",59,null],[11,"ptr","","",60,null],[11,"from_ptr_new","","",60,null],[11,"from_ptr_initialized","","",60,null],[11,"interface_ptr","","",60,null],[11,"interface_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",60,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",60,null],[11,"is_alive","","",60,null],[11,"equals","","",60,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"from_raw","","",59,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",59,null],[11,"destroy","","unbind from the subcompositor interface",60,null],[11,"get_subsurface","","give a surface the role sub-surface",60,null],[0,"wl_subsurface","wayland_client::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_client::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","",61,null],[11,"ptr","","",62,null],[11,"from_ptr_new","","",62,null],[11,"from_ptr_initialized","","",62,null],[11,"interface_ptr","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",62,null],[11,"is_alive","","",62,null],[11,"equals","","",62,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"from_raw","","",61,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",61,null],[11,"destroy","","remove sub-surface interface",62,null],[11,"set_position","","reposition the sub-surface",62,null],[11,"place_above","","restack the sub-surface",62,null],[11,"place_below","","restack the sub-surface",62,null],[11,"set_sync","","set sub-surface to synchronized mode",62,null],[11,"set_desync","","set sub-surface to desynchronized mode",62,null],[11,"fmt","wayland_client","",0,null],[11,"fmt","","",1,null],[11,"flush","wayland_client::protocol::wl_display","Non-blocking write to the server",4,null],[11,"create_event_queue","","Create a new EventQueue",4,null],[11,"last_error","","Get the last error that occured on the session",4,null],[11,"drop","","",4,null],[11,"register","wayland_client","Register a proxy to a handler of this event queue.",63,null],[11,"add_handler","","Insert a new handler to this event queue",63,null],[11,"add_handler_with_init","","Insert a new handler with init",63,null],[11,"get_handler","","Get a reference to a handler",64,null],[11,"get_mut_handler","","Get a mutable reference to a handler",64,null],[11,"dispatch","","Dispatches events from the internal buffer.",65,null],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",65,null],[11,"sync_roundtrip","","Synchronous roundtrip",65,null],[11,"state","","Get a handle to the internal state",65,null],[11,"deref","","",65,null],[11,"deref_mut","","",65,null],[11,"new","","Create a new EnvHandler",66,{"inputs":[],"output":{"name":"envhandler"}}],[11,"ready","","Is the handler ready",66,null],[11,"globals","","List of advertized globals",66,null],[11,"deref","","",66,null],[11,"global","","",66,null],[11,"global_remove","","",66,null],[11,"message","","",66,null],[0,"egl","","EGL utilities",null,null],[3,"WlEglSurface","wayland_client::egl","EGL surface",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","Create an EGL surface from a wayland surface",67,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"get_size","","Fetch current size of the EGL surface",67,null],[11,"resize","","Resize the EGL surface",67,null],[11,"ptr","","Raw pointer to the EGL surface",67,null],[11,"drop","","",67,null],[0,"cursor","wayland_client","Cursor utilities",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",68,null],[11,"drop","","",68,null],[11,"name","","Retrieve the name of this cursor.",69,null],[11,"image_count","","Retrieve the number of images contained in this\nanimated cursor",69,null],[11,"frame","","Retrieve the image number of cursor animation.",69,null],[11,"frame_and_duration","","Retrieve the image number and its duration.",69,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",69,null],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",69,null],[11,"deref","","",70,null],[11,"ptr","wayland_client::protocol::wl_display","",4,null],[11,"from_ptr_new","","",4,null],[11,"from_ptr_initialized","","",4,null],[11,"interface_ptr","","",4,null],[11,"interface_name","","",4,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",4,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",4,null],[11,"is_alive","","",4,null],[11,"equals","","",4,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"from_raw","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",3,null],[11,"sync","","asynchronous roundtrip",4,null],[11,"get_registry","","get global registry object",4,null],[11,"global","wayland_client::protocol::wl_registry","announce global object",5,null],[11,"global_remove","","announce removal of global object",5,null],[11,"ptr","","",6,null],[11,"from_ptr_new","","",6,null],[11,"from_ptr_initialized","","",6,null],[11,"interface_ptr","","",6,null],[11,"interface_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",6,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",6,null],[11,"is_alive","","",6,null],[11,"equals","","",6,null],[11,"bind","","bind an object to the display",6,null],[11,"done","wayland_client::protocol::wl_callback","done event",7,null],[11,"ptr","","",8,null],[11,"from_ptr_new","","",8,null],[11,"from_ptr_initialized","","",8,null],[11,"interface_ptr","","",8,null],[11,"interface_name","","",8,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",8,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",8,null],[11,"is_alive","","",8,null],[11,"equals","","",8,null],[11,"ptr","wayland_client::protocol::wl_compositor","",9,null],[11,"from_ptr_new","","",9,null],[11,"from_ptr_initialized","","",9,null],[11,"interface_ptr","","",9,null],[11,"interface_name","","",9,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",9,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",9,null],[11,"is_alive","","",9,null],[11,"equals","","",9,null],[11,"create_surface","","create new surface",9,null],[11,"create_region","","create new region",9,null],[11,"ptr","wayland_client::protocol::wl_shm_pool","",10,null],[11,"from_ptr_new","","",10,null],[11,"from_ptr_initialized","","",10,null],[11,"interface_ptr","","",10,null],[11,"interface_name","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",10,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",10,null],[11,"is_alive","","",10,null],[11,"equals","","",10,null],[11,"create_buffer","","create a buffer from the pool",10,null],[11,"destroy","","destroy the pool",10,null],[11,"resize","","change the size of the pool mapping",10,null],[11,"format","wayland_client::protocol::wl_shm","pixel format description",13,null],[11,"ptr","","",14,null],[11,"from_ptr_new","","",14,null],[11,"from_ptr_initialized","","",14,null],[11,"interface_ptr","","",14,null],[11,"interface_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",14,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",14,null],[11,"is_alive","","",14,null],[11,"equals","","",14,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"from_raw","","",11,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"from_raw","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",12,null],[11,"create_pool","","create a shm pool",14,null],[11,"release","wayland_client::protocol::wl_buffer","compositor releases buffer",15,null],[11,"ptr","","",16,null],[11,"from_ptr_new","","",16,null],[11,"from_ptr_initialized","","",16,null],[11,"interface_ptr","","",16,null],[11,"interface_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",16,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",16,null],[11,"is_alive","","",16,null],[11,"equals","","",16,null],[11,"destroy","","destroy a buffer",16,null],[11,"offer","wayland_client::protocol::wl_data_offer","advertise offered mime type",18,null],[11,"source_actions","","notify the source-side available actions",18,null],[11,"action","","notify the selected action",18,null],[11,"ptr","","",19,null],[11,"from_ptr_new","","",19,null],[11,"from_ptr_initialized","","",19,null],[11,"interface_ptr","","",19,null],[11,"interface_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",19,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",19,null],[11,"is_alive","","",19,null],[11,"equals","","",19,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"from_raw","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",17,null],[11,"accept","","accept one of the offered mime types",19,null],[11,"receive","","request that the data is transferred",19,null],[11,"destroy","","destroy data offer",19,null],[11,"finish","","the offer will no longer be used",19,null],[11,"set_actions","","set the available/preferred drag-and-drop actions",19,null],[11,"target","wayland_client::protocol::wl_data_source","a target accepts an offered mime type",21,null],[11,"send","","send the data",21,null],[11,"cancelled","","selection was cancelled",21,null],[11,"dnd_drop_performed","","the drag-and-drop operation physically finished",21,null],[11,"dnd_finished","","the drag-and-drop operation concluded",21,null],[11,"action","","notify the selected action",21,null],[11,"ptr","","",22,null],[11,"from_ptr_new","","",22,null],[11,"from_ptr_initialized","","",22,null],[11,"interface_ptr","","",22,null],[11,"interface_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",22,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",22,null],[11,"is_alive","","",22,null],[11,"equals","","",22,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"from_raw","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",20,null],[11,"offer","","add an offered mime type",22,null],[11,"destroy","","destroy the data source",22,null],[11,"set_actions","","set the available drag-and-drop actions",22,null],[11,"data_offer","wayland_client::protocol::wl_data_device","introduce a new wl_data_offer",24,null],[11,"enter","","initiate drag-and-drop session",24,null],[11,"leave","","end drag-and-drop session",24,null],[11,"motion","","drag-and-drop session motion",24,null],[11,"drop","","end drag-and-drop session successfully",24,null],[11,"selection","","advertise new selection",24,null],[11,"ptr","","",25,null],[11,"from_ptr_new","","",25,null],[11,"from_ptr_initialized","","",25,null],[11,"interface_ptr","","",25,null],[11,"interface_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",25,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",25,null],[11,"is_alive","","",25,null],[11,"equals","","",25,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",23,null],[11,"start_drag","","start drag-and-drop operation",25,null],[11,"set_selection","","copy data to the selection",25,null],[11,"release","","destroy data device",25,null],[11,"ptr","wayland_client::protocol::wl_data_device_manager","",26,null],[11,"from_ptr_new","","",26,null],[11,"from_ptr_initialized","","",26,null],[11,"interface_ptr","","",26,null],[11,"interface_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",26,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",26,null],[11,"is_alive","","",26,null],[11,"equals","","",26,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"cmp","","",27,null],[11,"hash","","",27,null],[11,"fmt","","",27,null],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,null],[11,"is_all","","Returns `true` if all flags are currently set.",27,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,null],[11,"insert","","Inserts the specified flags in-place.",27,null],[11,"remove","","Removes the specified flags in-place.",27,null],[11,"toggle","","Toggles the specified flags in-place.",27,null],[11,"bitor","","Returns the union of the two sets of flags.",27,null],[11,"bitor_assign","","Adds the set of flags.",27,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,null],[11,"bitxor_assign","","Toggles the set of flags.",27,null],[11,"bitand","","Returns the intersection between the two sets of flags.",27,null],[11,"bitand_assign","","Disables all flags disabled in the set.",27,null],[11,"sub","","Returns the set difference of the two sets of flags.",27,null],[11,"sub_assign","","Disables all flags enabled in the set.",27,null],[11,"not","","Returns the complement of this set of flags.",27,null],[11,"extend","","",27,null],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",27,null],[11,"create_data_source","","create a new data source",26,null],[11,"get_data_device","","create a new data device",26,null],[11,"ptr","wayland_client::protocol::wl_shell","",29,null],[11,"from_ptr_new","","",29,null],[11,"from_ptr_initialized","","",29,null],[11,"interface_ptr","","",29,null],[11,"interface_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",29,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",29,null],[11,"is_alive","","",29,null],[11,"equals","","",29,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"from_raw","","",28,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",28,null],[11,"get_shell_surface","","create a shell surface from a surface",29,null],[11,"ping","wayland_client::protocol::wl_shell_surface","ping client",31,null],[11,"configure","","suggest resize",31,null],[11,"popup_done","","popup interaction is done",31,null],[11,"ptr","","",32,null],[11,"from_ptr_new","","",32,null],[11,"from_ptr_initialized","","",32,null],[11,"interface_ptr","","",32,null],[11,"interface_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",32,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",32,null],[11,"is_alive","","",32,null],[11,"equals","","",32,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"hash","","",33,null],[11,"fmt","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,null],[11,"is_all","","Returns `true` if all flags are currently set.",33,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,null],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,null],[11,"bitor_assign","","Adds the set of flags.",33,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,null],[11,"bitxor_assign","","Toggles the set of flags.",33,null],[11,"bitand","","Returns the intersection between the two sets of flags.",33,null],[11,"bitand_assign","","Disables all flags disabled in the set.",33,null],[11,"sub","","Returns the set difference of the two sets of flags.",33,null],[11,"sub_assign","","Disables all flags enabled in the set.",33,null],[11,"not","","Returns the complement of this set of flags.",33,null],[11,"extend","","",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",33,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"cmp","","",34,null],[11,"hash","","",34,null],[11,"fmt","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,null],[11,"is_all","","Returns `true` if all flags are currently set.",34,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,null],[11,"insert","","Inserts the specified flags in-place.",34,null],[11,"remove","","Removes the specified flags in-place.",34,null],[11,"toggle","","Toggles the specified flags in-place.",34,null],[11,"bitor","","Returns the union of the two sets of flags.",34,null],[11,"bitor_assign","","Adds the set of flags.",34,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,null],[11,"bitxor_assign","","Toggles the set of flags.",34,null],[11,"bitand","","Returns the intersection between the two sets of flags.",34,null],[11,"bitand_assign","","Disables all flags disabled in the set.",34,null],[11,"sub","","Returns the set difference of the two sets of flags.",34,null],[11,"sub_assign","","Disables all flags enabled in the set.",34,null],[11,"not","","Returns the complement of this set of flags.",34,null],[11,"extend","","",34,null],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",34,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"from_raw","","",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",30,null],[11,"pong","","respond to a ping event",32,null],[11,"_move","","start an interactive move",32,null],[11,"resize","","start an interactive resize",32,null],[11,"set_toplevel","","make the surface a toplevel surface",32,null],[11,"set_transient","","make the surface a transient surface",32,null],[11,"set_fullscreen","","make the surface a fullscreen surface",32,null],[11,"set_popup","","make the surface a popup surface",32,null],[11,"set_maximized","","make the surface a maximized surface",32,null],[11,"set_title","","set surface title",32,null],[11,"set_class","","set surface class",32,null],[11,"enter","wayland_client::protocol::wl_surface","surface enters an output",36,null],[11,"leave","","surface leaves an output",36,null],[11,"ptr","","",37,null],[11,"from_ptr_new","","",37,null],[11,"from_ptr_initialized","","",37,null],[11,"interface_ptr","","",37,null],[11,"interface_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",37,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",37,null],[11,"is_alive","","",37,null],[11,"equals","","",37,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"from_raw","","",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",35,null],[11,"destroy","","delete surface",37,null],[11,"attach","","set the surface contents",37,null],[11,"damage","","mark part of the surface damaged",37,null],[11,"frame","","request a frame throttling hint",37,null],[11,"set_opaque_region","","set opaque region",37,null],[11,"set_input_region","","set input region",37,null],[11,"commit","","commit pending surface state",37,null],[11,"set_buffer_transform","","sets the buffer transformation",37,null],[11,"set_buffer_scale","","sets the buffer scaling factor",37,null],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",37,null],[11,"capabilities","wayland_client::protocol::wl_seat","seat capabilities changed",38,null],[11,"name","","unique identifier for this seat",38,null],[11,"ptr","","",39,null],[11,"from_ptr_new","","",39,null],[11,"from_ptr_initialized","","",39,null],[11,"interface_ptr","","",39,null],[11,"interface_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",39,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",39,null],[11,"is_alive","","",39,null],[11,"equals","","",39,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"partial_cmp","","",40,null],[11,"lt","","",40,null],[11,"le","","",40,null],[11,"gt","","",40,null],[11,"ge","","",40,null],[11,"cmp","","",40,null],[11,"hash","","",40,null],[11,"fmt","","",40,null],[11,"empty","","Returns an empty set of flags.",40,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",40,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",40,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",40,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",40,null],[11,"is_all","","Returns `true` if all flags are currently set.",40,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",40,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",40,null],[11,"insert","","Inserts the specified flags in-place.",40,null],[11,"remove","","Removes the specified flags in-place.",40,null],[11,"toggle","","Toggles the specified flags in-place.",40,null],[11,"bitor","","Returns the union of the two sets of flags.",40,null],[11,"bitor_assign","","Adds the set of flags.",40,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",40,null],[11,"bitxor_assign","","Toggles the set of flags.",40,null],[11,"bitand","","Returns the intersection between the two sets of flags.",40,null],[11,"bitand_assign","","Disables all flags disabled in the set.",40,null],[11,"sub","","Returns the set difference of the two sets of flags.",40,null],[11,"sub_assign","","Disables all flags enabled in the set.",40,null],[11,"not","","Returns the complement of this set of flags.",40,null],[11,"extend","","",40,null],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",40,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",40,null],[11,"get_pointer","","return pointer object",39,null],[11,"get_keyboard","","return keyboard object",39,null],[11,"get_touch","","return touch object",39,null],[11,"release","","release the seat object",39,null],[11,"enter","wayland_client::protocol::wl_pointer","enter event",45,null],[11,"leave","","leave event",45,null],[11,"motion","","pointer motion event",45,null],[11,"button","","pointer button event",45,null],[11,"axis","","axis event",45,null],[11,"frame","","end of a pointer event sequence",45,null],[11,"axis_source","","axis source event",45,null],[11,"axis_stop","","axis stop event",45,null],[11,"axis_discrete","","axis click event",45,null],[11,"ptr","","",46,null],[11,"from_ptr_new","","",46,null],[11,"from_ptr_initialized","","",46,null],[11,"interface_ptr","","",46,null],[11,"interface_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",46,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",46,null],[11,"is_alive","","",46,null],[11,"equals","","",46,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"from_raw","","",41,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",41,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"from_raw","","",42,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",42,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"from_raw","","",43,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",43,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",44,null],[11,"set_cursor","","set the pointer surface",46,null],[11,"release","","release the pointer object",46,null],[11,"keymap","wayland_client::protocol::wl_keyboard","keyboard mapping",49,null],[11,"enter","","enter event",49,null],[11,"leave","","leave event",49,null],[11,"key","","key event",49,null],[11,"modifiers","","modifier and group state",49,null],[11,"repeat_info","","repeat rate and delay",49,null],[11,"ptr","","",50,null],[11,"from_ptr_new","","",50,null],[11,"from_ptr_initialized","","",50,null],[11,"interface_ptr","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",50,null],[11,"is_alive","","",50,null],[11,"equals","","",50,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"from_raw","","",47,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"from_raw","","",48,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",48,null],[11,"release","","release the keyboard object",50,null],[11,"down","wayland_client::protocol::wl_touch","touch down event and beginning of a touch sequence",51,null],[11,"up","","end of a touch event sequence",51,null],[11,"motion","","update of touch point coordinates",51,null],[11,"frame","","end of touch frame event",51,null],[11,"cancel","","touch session cancelled",51,null],[11,"ptr","","",52,null],[11,"from_ptr_new","","",52,null],[11,"from_ptr_initialized","","",52,null],[11,"interface_ptr","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",52,null],[11,"is_alive","","",52,null],[11,"equals","","",52,null],[11,"release","","release the touch object",52,null],[11,"geometry","wayland_client::protocol::wl_output","properties of the output",55,null],[11,"mode","","advertise available modes for the output",55,null],[11,"done","","sent all information about output",55,null],[11,"scale","","output scaling properties",55,null],[11,"ptr","","",56,null],[11,"from_ptr_new","","",56,null],[11,"from_ptr_initialized","","",56,null],[11,"interface_ptr","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",56,null],[11,"is_alive","","",56,null],[11,"equals","","",56,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"from_raw","","",53,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",53,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"from_raw","","",54,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",54,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"fmt","","",57,null],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",57,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,null],[11,"is_all","","Returns `true` if all flags are currently set.",57,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,null],[11,"insert","","Inserts the specified flags in-place.",57,null],[11,"remove","","Removes the specified flags in-place.",57,null],[11,"toggle","","Toggles the specified flags in-place.",57,null],[11,"bitor","","Returns the union of the two sets of flags.",57,null],[11,"bitor_assign","","Adds the set of flags.",57,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,null],[11,"bitxor_assign","","Toggles the set of flags.",57,null],[11,"bitand","","Returns the intersection between the two sets of flags.",57,null],[11,"bitand_assign","","Disables all flags disabled in the set.",57,null],[11,"sub","","Returns the set difference of the two sets of flags.",57,null],[11,"sub_assign","","Disables all flags enabled in the set.",57,null],[11,"not","","Returns the complement of this set of flags.",57,null],[11,"extend","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",57,null],[11,"release","","release the output object",56,null],[11,"ptr","wayland_client::protocol::wl_region","",58,null],[11,"from_ptr_new","","",58,null],[11,"from_ptr_initialized","","",58,null],[11,"interface_ptr","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",58,null],[11,"is_alive","","",58,null],[11,"equals","","",58,null],[11,"destroy","","destroy region",58,null],[11,"add","","add rectangle to region",58,null],[11,"subtract","","subtract rectangle from region",58,null],[11,"ptr","wayland_client::protocol::wl_subcompositor","",60,null],[11,"from_ptr_new","","",60,null],[11,"from_ptr_initialized","","",60,null],[11,"interface_ptr","","",60,null],[11,"interface_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",60,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",60,null],[11,"is_alive","","",60,null],[11,"equals","","",60,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"from_raw","","",59,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",59,null],[11,"destroy","","unbind from the subcompositor interface",60,null],[11,"get_subsurface","","give a surface the role sub-surface",60,null],[11,"ptr","wayland_client::protocol::wl_subsurface","",62,null],[11,"from_ptr_new","","",62,null],[11,"from_ptr_initialized","","",62,null],[11,"interface_ptr","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"supported_version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"version","","",62,null],[11,"is_alive","","",62,null],[11,"equals","","",62,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"from_raw","","",61,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"to_raw","","",61,null],[11,"destroy","","remove sub-surface interface",62,null],[11,"set_position","","reposition the sub-surface",62,null],[11,"place_above","","restack the sub-surface",62,null],[11,"place_below","","restack the sub-surface",62,null],[11,"set_sync","","set sub-surface to synchronized mode",62,null],[11,"set_desync","","set sub-surface to desynchronized mode",62,null],[0,"sys","wayland_client","Reexports of types and objects from wayland-sys",null,null],[8,"Init","","A trait to initialize handlers after they&#39;ve been inserted in an event queue",null,null],[10,"init","","Init the handler",71,null],[8,"Proxy","","Common routines for wayland proxy objects.",null,null],[10,"ptr","","Pointer to the underlying wayland proxy object",72,null],[10,"from_ptr_new","","Create an instance from a wayland pointer",72,null],[10,"from_ptr_initialized","","Create an instance from a wayland pointer",72,null],[10,"interface_ptr","","Pointer to the interface representation",72,null],[10,"interface_name","","Internal wayland name of this interface",72,{"inputs":[],"output":{"name":"str"}}],[10,"supported_version","","Max version of this interface supported",72,{"inputs":[],"output":{"name":"u32"}}],[10,"version","","Current version of the interface this proxy is instanciated with",72,null],[10,"is_alive","","Check if the proxt behind this handle is actually still alive",72,null],[10,"equals","","Check of two handles are actually the same wayland object",72,null],[8,"Handler","","Generic handler trait",null,null],[10,"message","","Dispatch a message.",73,null],[11,"expect","","Assert that result is successfull and extract the value.",2,null],[14,"declare_handler","","Registers a handler type so it can be used in event queue",null,null],[14,"wayland_env","","Create an environment handling struct",null,null]],"paths":[[4,"ConnectError"],[4,"FatalError"],[4,"RequestResult"],[4,"Error"],[3,"WlDisplay"],[8,"Handler"],[3,"WlRegistry"],[8,"Handler"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[4,"Error"],[4,"Format"],[8,"Handler"],[3,"WlShm"],[8,"Handler"],[3,"WlBuffer"],[4,"Error"],[8,"Handler"],[3,"WlDataOffer"],[4,"Error"],[8,"Handler"],[3,"WlDataSource"],[4,"Error"],[8,"Handler"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"DndAction"],[4,"Error"],[3,"WlShell"],[4,"FullscreenMethod"],[8,"Handler"],[3,"WlShellSurface"],[3,"Resize"],[3,"Transient"],[4,"Error"],[8,"Handler"],[3,"WlSurface"],[8,"Handler"],[3,"WlSeat"],[3,"Capability"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[8,"Handler"],[3,"WlPointer"],[4,"KeymapFormat"],[4,"KeyState"],[8,"Handler"],[3,"WlKeyboard"],[8,"Handler"],[3,"WlTouch"],[4,"Subpixel"],[4,"Transform"],[8,"Handler"],[3,"WlOutput"],[3,"Mode"],[3,"WlRegion"],[4,"Error"],[3,"WlSubcompositor"],[4,"Error"],[3,"WlSubsurface"],[3,"EventQueueHandle"],[3,"StateGuard"],[3,"EventQueue"],[3,"EnvHandler"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[8,"Init"],[8,"Proxy"],[8,"Handler"]]};
searchIndex["wayland_scanner"] = {"doc":"Wayland scanner crate","items":[[4,"Side","wayland_scanner","Side to generate",null,null],[13,"Client","","wayland client applications",0,null],[13,"Server","","wayland compositors",0,null],[5,"generate_interfaces","","Generate the interfaces for a protocol",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":null}],[5,"generate_code","","Generate the code for a protocol",null,{"inputs":[{"name":"p1"},{"name":"p2"},{"name":"side"}],"output":null}],[11,"clone","","",0,null],[11,"eq","","",0,null]],"paths":[[4,"Side"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[6,"pid_t","wayland_sys","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[0,"common","","Various types and functions that are used by both the client and the server\nlibraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_proxy_get_version","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal_constructor_versioned","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",5,null],[11,"deref","","",6,null],[0,"server","wayland_sys","Bindings to the client library `libwayland-server.so`",null,null],[3,"WaylandServer","wayland_sys::server","",null,null],[12,"wl_client_flush","","",7,null],[12,"wl_client_destroy","","",7,null],[12,"wl_client_get_display","","",7,null],[12,"wl_client_get_credentials","","",7,null],[12,"wl_client_get_object","","",7,null],[12,"wl_client_add_destroy_listener","","",7,null],[12,"wl_client_get_destroy_listener","","",7,null],[12,"wl_client_post_no_memory","","",7,null],[12,"wl_resource_create","","",7,null],[12,"wl_client_create","","",7,null],[12,"wl_display_create","","",7,null],[12,"wl_display_destroy","","",7,null],[12,"wl_display_get_serial","","",7,null],[12,"wl_display_next_serial","","",7,null],[12,"wl_display_add_socket","","",7,null],[12,"wl_display_add_socket_auto","","",7,null],[12,"wl_display_add_shm_format","","",7,null],[12,"wl_display_get_additional_shm_formats","","",7,null],[12,"wl_display_get_event_loop","","",7,null],[12,"wl_display_terminate","","",7,null],[12,"wl_display_run","","",7,null],[12,"wl_display_flush_clients","","",7,null],[12,"wl_display_add_destroy_listener","","",7,null],[12,"wl_display_get_destroy_listener","","",7,null],[12,"wl_global_create","","",7,null],[12,"wl_display_init_shm","","",7,null],[12,"wl_event_loop_create","","",7,null],[12,"wl_event_loop_destroy","","",7,null],[12,"wl_event_loop_add_fd","","",7,null],[12,"wl_event_loop_fd_update","","",7,null],[12,"wl_event_lopp_add_timer","","",7,null],[12,"wl_event_loop_add_signal","","",7,null],[12,"wl_event_loop_dispatch","","",7,null],[12,"wl_event_loop_dispatch_idle","","",7,null],[12,"wl_event_loop_add_idle","","",7,null],[12,"wl_event_loop_get_fd","","",7,null],[12,"wl_event_loop_add_destroy_listener","","",7,null],[12,"wl_event_loop_get_destroy_listener","","",7,null],[12,"wl_event_source_timer_update","","",7,null],[12,"wl_event_source_remove","","",7,null],[12,"wl_event_source_check","","",7,null],[12,"wl_global_destroy","","",7,null],[12,"wl_resource_post_event_array","","",7,null],[12,"wl_resource_queue_event_array","","",7,null],[12,"wl_resource_post_no_memory","","",7,null],[12,"wl_resource_set_implementation","","",7,null],[12,"wl_resource_set_dispatcher","","",7,null],[12,"wl_resource_destroy","","",7,null],[12,"wl_resource_get_client","","",7,null],[12,"wl_resource_get_id","","",7,null],[12,"wl_resource_get_link","","",7,null],[12,"w_resource_from_link","","",7,null],[12,"wl_resource_find_for_client","","",7,null],[12,"wl_resource_set_user_data","","",7,null],[12,"wl_resource_get_user_data","","",7,null],[12,"wl_resource_get_version","","",7,null],[12,"wl_resource_set_destructor","","",7,null],[12,"wl_resource_instance_of","","",7,null],[12,"wl_resource_add_destroy_listener","","",7,null],[12,"wl_resource_get_destroy_listener","","",7,null],[12,"wl_shm_buffer_begin_access","","",7,null],[12,"wl_shm_buffer_end_access","","",7,null],[12,"wl_shm_buffer_get","","",7,null],[12,"wl_shm_buffer_get_data","","",7,null],[12,"wl_shm_buffer_get_stride","","",7,null],[12,"wl_shm_buffer_get_format","","",7,null],[12,"wl_shm_buffer_get_width","","",7,null],[12,"wl_shm_buffer_get_heigth","","",7,null],[12,"wl_log_set_handler_server","","",7,null],[12,"wl_list_init","","",7,null],[12,"wl_list_insert","","",7,null],[12,"wl_list_remove","","",7,null],[12,"wl_list_length","","",7,null],[12,"wl_list_empty","","",7,null],[12,"wl_list_insert_list","","",7,null],[12,"wl_array_init","","",7,null],[12,"wl_array_release","","",7,null],[12,"wl_array_add","","",7,null],[12,"wl_array_copy","","",7,null],[12,"wl_resource_post_event","","",7,null],[12,"wl_resource_queue_event","","",7,null],[12,"wl_resource_post_error","","",7,null],[3,"WAYLAND_SERVER_OPTION","","",null,null],[3,"WAYLAND_SERVER_HANDLE","","",null,null],[4,"wl_client","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_loop","","",null,null],[4,"wl_event_source","","",null,null],[4,"wl_global","","",null,null],[4,"wl_listener","","",null,null],[4,"wl_resource","","",null,null],[4,"wl_shm_buffer","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[6,"wl_event_loop_fd_func_t","","",null,null],[6,"wl_event_loop_timer_func_t","","",null,null],[6,"wl_event_loop_signal_func_t","","",null,null],[6,"wl_event_loop_idle_func_t","","",null,null],[6,"wl_global_bind_func_t","","",null,null],[6,"wl_notify_func_t","","",null,null],[6,"wl_resource_destroy_func_t","","",null,null],[11,"open","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",8,null],[11,"deref","","",9,null],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",10,null],[12,"wl_egl_window_destroy","","",10,null],[12,"wl_egl_window_resize","","",10,null],[12,"wl_egl_window_get_attached_size","","",10,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",11,null],[11,"deref","","",12,null],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",13,null],[12,"height","","actual height",13,null],[12,"hotspot_x","","hot spot x (must be inside image)",13,null],[12,"hotspot_y","","hot spot y (must be inside image)",13,null],[12,"delay","","animation delay to next frame",13,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",14,null],[12,"images","","",14,null],[12,"name","","",14,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",15,null],[12,"wl_cursor_theme_destroy","","",15,null],[12,"wl_cursor_theme_get_cursor","","",15,null],[12,"wl_cursor_image_get_buffer","","",15,null],[12,"wl_cursor_frame","","",15,null],[12,"wl_cursor_frame_and_duration","","",15,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",16,null],[11,"deref","","",17,null],[14,"ffi_dispatch","wayland_sys","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandServer"],[3,"WAYLAND_SERVER_OPTION"],[3,"WAYLAND_SERVER_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
initSearch(searchIndex);
